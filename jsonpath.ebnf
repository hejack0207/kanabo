
path
    = absolute path
    | relative path
    ;

absolute path
    = "$", [ qualified path ]
    ;

qualified path
    = abbreviated relative path
    | ".", relative path
    ;

relative path
    = node type test, "()"
    | step, [ qualified path ]
    ;

abbreviated relative path
    = "..", relative path
    ;

step
    = name test, { predicate }
    ;

name test
    = "*"
    | name
    ;

node type test
    = "object"
    | "array"
    | "string"
    | "number"
    | "boolean"
    | "null"
    ;

(* this production may be quoted with single quotes, which will be discarded *)
name
    = ? any sequence of unicode characters except '.' and '[' ?
    ;

predicate
    = wildcard
    | subscript
    | slice
    | union
    | filter
    | script
    ;

wildcard
    = "[", "*", "]"
    ;

subscript
     = "[", integer, "]"
     ;

slice
    = "[" [ integer ], ":", integer, [ ":", integer ], "]"
    ;

union
    = "[", union expression, ",", union expression, "]"
    ;

union expression
    = relative path
    (* ??? - allow an optional qualified path expression after the filter expression? *)
    | filter expression
    ;

filter
    = "[", "?(", filter expression, ")", "]"
    ;

filter expression
    = ? TBD ?
    ;

script expression
    = ? a set of implementation defined characters, ouside the scope of this definition ?
    ;

script
    = "[", "(", script expression, ")", "]"
    ;

integer
    = digit, { digit }
    ;

digit
    = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
    ;


