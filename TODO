-*- gfm -*-

# Informational files for [金棒][home] (kanabō)

Copyright (c) 2012 [Kevin Birch](mailto:kmb@pobox.com).  All rights reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of an [MIT-style License][license] as described in
the LICENSE file.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
LICENSE file for more details.

## TODO

### parser

* use errorno ala model
* refactor direct status code setters into function calls
* wrap output in debug conditionals
* complete free_predicate function
* union support
* filter support
* should we allow an optional qualified path expression after the filter expression in the union expression production?

### loader

* make loader api return an enum instead of a struct
  * expose methods to make error message
* handle anchors and aliases
  * https://en.wikipedia.org/wiki/Hashed_array_tree
* handle tags

### model

* expand scalar nodes to include json subtypes
* add tree walker api
* add printing visitor
  * for printing scalar node values:
```
    char *format;
    int ret = asprintf(&format, "scalar: '%%.%zds'\n", event->data.scalar.length);
    if(-1 != ret)
    {
        printf(format, event->data.scalar.value);
    }
    free(format);
```

### makefile

* add submodule build support
* add version header generation support
* add package phase impl
* add install phase impl
* extract as its own project
* can the warnings from include be supressed somehow? they show up when the depend files don't exist yet

### Path languages

* finish jsonpath parser
* extract as project, add as submodule
* ypath support

### unit testing

* upgrade to latest version of check
* try CTest

* Check http://check.sourceforge.net
  * pro: forks tests, still alive
  * con: installed as a library, macro based test setup
* CTest https://github.com/bvdberg/ctest
  * candidate for improvement using forking
  * pro: embedible - single h file, suite support, setup/teardown support, fixture support
  * con: does not fork, uses macro based test setup
* CuTest http://cutest.sourceforge.net
  * pro: embedible - single c/h file, has an API
  * con: does not fork, not updated in 2 years, many outstanding bugs and patches, originated on Windows
  * non-starter, not maintained
* head-unit https://github.com/boothj5/head-unit
  * pro: has an API, C/C++ support, nice output
  * con: does not fork, installed as a library, no user base?
  * non-starter, no other users
* AceUnit http://aceunit.sourceforge.net
  * pro: JUnit 4 style
  * con: requires Java
  * non-starter, using java is crazy
* CUnit http://cunit.sourceforge.net
  * pro: uses an API, various runners, nice output
  * con: API is very cumbersome, does not fork, not updated for several years, installed as a library, complex, many outstanding bugs and patches, requires glib
  * non-starter, API is terrible

### site

* add site target
* http://tinytree.info

[home]: https://github.com/kevinbirch/kanabo "project home"
[license]: http://www.opensource.org/licenses/ncsa
